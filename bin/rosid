#!/usr/bin/env node

'use strict'

const path    = require('path')
const program = require('commander')
const pkg     = require('./../package')

const getRosid = function() {

	const routesPath = path.resolve(process.cwd(), './rosidfile')

	const Rosid  = require('./../src/index')
	const routes = require(routesPath)

	return Rosid(routes)

}

const collect = function(value, list) {

	return [
		...list,
		...value.split(',')
	]

}

program
	.command('serve <srcPath>')
	.description('serve current or specified folder')
	.option('-p, --polling', 'use polling to watch files over a network or in other non-standard situations')
	.action((srcPath, opts) => {

		srcPath = path.resolve(process.cwd(), srcPath || '')

		getRosid().serve(srcPath, {
			polling: opts.polling
		})

	})

program
	.command('compile <srcPath> <distPath>')
	.description('compile current or specified folder to static files')
	.option('-i, --ignore <filePath>', 'exclude files from the copy-task', collect, [])
	.action((srcPath, distPath, opts) => {

		srcPath  = path.resolve(process.cwd(), srcPath || '')
		distPath = path.resolve(process.cwd(), distPath)

		getRosid().compile(srcPath, distPath, {
			ignore: opts.ignore
		})

	})

program
	.version(pkg.version)
	.parse(process.argv)

if (program.args.length<1) program.help()